name: Remote Testim

on:
  repository_dispatch:
    types: [testim-ci]

jobs:
  init-core-checks:
    name: Init Core Checks
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Get Github-App token
        if: always()
        id: get_token
        uses: getsentry/action-github-app-token@38e217dc0fddb8008773820fae0875f439a614de # v1.0.4
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Init PHPUnit Check
        uses: LouisBrunner/checks-action@2a1af428dc34afcf0f8eda00ff832f69678fef76 # v1.1.2
        if: always()
        with:
          name: Elementor Tests / PHPUnit
          repo: elementor/elementor
          sha: ${{ github.event.client_payload.sha }}
          token: ${{ steps.get_token.outputs.token }}
          status: in_progress
      - name: Init Screenshotter Check
        uses: LouisBrunner/checks-action@2a1af428dc34afcf0f8eda00ff832f69678fef76 # v1.1.2
        if: always()
        with:
          name: Elementor Tests / Screenshotter
          repo: elementor/elementor
          sha: ${{ github.event.client_payload.sha }}
          token: ${{ steps.get_token.outputs.token }}
          status: in_progress

  build:
    name: Build
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Clone & Build Core
        run: |
          cd ~/
          git clone 'https://github.com/${{ github.event.client_payload.repository }}' elementor
          cd elementor
          git checkout ${{ github.event.client_payload.sha }}
          npm ci && npx grunt
      - name: Save Core Build to Cache
        uses: actions/cache@v2
        env:
          key: ${{ github.sha }}-${{ github.event.client_payload.sha }}-core
        with:
          path: ~/elementor/*
          key: ${{ env.key }}
          restore-keys: ${{ env.key }}
      - name: Checkout Pro source code
        uses: actions/checkout@v2
      - name: Build Pro
        run: |
          ln -s ~/elementor ../elementor
          npm i && grunt
      - name: Save Pro Build to Cache
        uses: actions/cache@v2
        env:
          key: build-${{ github.sha }}-pro
        with:
          path: ./*
          key: ${{ env.key }}
          restore-keys: ${{ env.key }}

  phpunit:
    name: PHPUnit
    needs: [ build ]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
    steps:
      - name: Startup MySQL service
        run: sudo /etc/init.d/mysql start
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          bash bin/install-wp-tests.sh wordpress_test root root localhost latest
          wget --quiet -O /tmp/phpunit-7 https://phar.phpunit.de/phpunit-7.phar
      - name: Restore Core Build From Cache
        uses: actions/cache@v2
        env:
          key: ${{ github.sha }}-${{ github.event.client_payload.sha }}-core
        with:
          path: ~/elementor/*
          key: ${{ env.key }}
      - name: Replace Default Core
        run: |
          rm -rf /tmp/wordpress/wp-content/plugins/elementor
          ln -s ~/elementor /tmp/wordpress/wp-content/plugins/elementor
      - name: PHP7.4
        run: php7.4 /tmp/phpunit-7
      - name: PHP7.4 - Multisite
        run: WP_MULTISITE=1 php7.4 /tmp/phpunit-7
      - name: Get Github-App token
        if: always()
        id: get_token
        uses: getsentry/action-github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Set Core check-run status
        uses: LouisBrunner/checks-action@2a1af428dc34afcf0f8eda00ff832f69678fef76 # v1.1.2
        if: always()
        with:
          name: Elementor Tests / PHPUnit
          repo: elementor/elementor
          sha: ${{ github.event.client_payload.sha }}
          token: ${{ steps.get_token.outputs.token }}
          status: completed
          conclusion: ${{ job.status }}
          details_url: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}

  testim:
    name: testim test - WP ${{ matrix.wpCoreVersion }} on PHP ${{ matrix.phpVersion }}
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        include:
          - phpVersion: '7.4'
            wpCoreVersion: 'latest'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Install Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Restore build from cache
        uses: actions/cache@v2
        id: restore-build
        with:
          path: ./build/*
          key: ${{ github.sha }}
      - name: Update wp-env.json file
        env:
          PHP_VERSION: ${{ matrix.phpVersion }}
          WP_CORE_VERSION: ${{ matrix.wpCoreVersion }}
        run: node ./.github/scripts/build-wp-env.js
      - name: Install wp-env
        run: npm install --no-package-lock --no-save @wordpress/env@4.0.0
      - name: Install WordPress environment
        run: |
          npx wp-env start
          # change wp-env folder owner to www-data
          sudo chown 33:33 -R ~/wp-env/
      - name: WordPress debug information
        run: |
          npx wp-env run tests-cli "wp core version"
          npx wp-env run tests-cli "wp --info"
      - name: Install Testim
        run: npm install --no-package-lock --no-save @testim/testim-cli
      - name: Install Ngrok
        run: npm install --no-package-lock --no-save ngrok@4.0.1
      - name: Run Testim tests
        run: node ./.github/scripts/testim_ci.js ${{ secrets.TESTIM_PROJECT }} ${{ secrets.TESTIM_TOKEN }} ${{ secrets.NGROK_TOKEN }} 
